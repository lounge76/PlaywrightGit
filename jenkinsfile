pipeline {
   agent { any { image 'mcr.microsoft.com/playwright:v1.38.0-jammy' } }
   stages {
      stage('Add dependency') {
      steps {
            bat '''
            npm i -D @playwright/test
            '''
            script {
              statusComment = "[${env.JOB_NAME}] <${env.BUILD_URL}|#${env.BUILD_NUMBER}> ${env.STAGE_NAME} stage was approved by ${responder} for ${env.GIT_BRANCH}"
              slackSend color: '#0000ff', message: "statusComment"
            }
      }
      
    }
    stage('Install Playwright and browsers') {
      steps {
        bat '''
          npx playwright install
        '''

      }
    }
    stage('Run Playwright tests') {
      steps {
        bat '''
          npx playwright test 
        '''
      }
    }
  }
}

String getTestResultsMessage() {
    AbstractTestResultAction testResultAction = currentBuild.rawBuild.getAction(AbstractTestResultAction.class)
    if (testResultAction != null) {
        def total = testResultAction.totalCount
        def failed = testResultAction.failCount
        def skipped = testResultAction.skipCount
        return "[${env.JOB_NAME}] <${env.BUILD_URL}|#${env.BUILD_NUMBER}> had test failures for ${env.GIT_BRANCH}.\n  Total: ${total}, Failed: ${failed}, Skipped: ${skipped}"
    } else {
        return "[${env.JOB_NAME}] <${env.BUILD_URL}|#${env.BUILD_NUMBER}> failed for ${env.GIT_BRANCH}"
    }
}

String getBuildUser() {
    return currentBuild.rawBuild.getCause(Cause.UserIdCause).getUserId()
}